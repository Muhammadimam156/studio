/**
 * @fileoverview Firestore Security Rules for Gemini Studio application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for both user profiles and generated content.
 * Users can only create, read, update, and delete data associated with their own user ID.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  Only the authenticated user can access their own profile.
 * - /users/{userId}/generatedContent/{contentId}: Stores content generated by each user. Only the owning user can access this content.
 *
 * Key Security Decisions:
 * - No public listing of users or generated content is allowed. Listing is restricted to a user's own generated content.
 * - The rules rely on path-based authorization, where the {userId} in the path must match the authenticated user's UID.
 * - Data consistency between the path and the document's internal 'userId' field is enforced on creation and updates.
 *
 * Denormalization for Authorization:
 * The `GeneratedContent` documents include a `userId` field that is denormalized from the parent `/users/{userId}` path.
 * This allows for efficient security rules without requiring extra `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the /users collection and its documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own user document.
     * @allow (get) Authenticated user can get their own user document.
     * @allow (update) Authenticated user can update their own user document.
     * @allow (delete) Authenticated user can delete their own user document.
     * @deny (create) Unauthenticated user cannot create a user document.
     * @deny (get) Unauthenticated user cannot get a user document.
     * @deny (update) Unauthenticated user cannot update a user document.
     * @deny (delete) Unauthenticated user cannot delete a user document.
     * @deny (create) Authenticated user cannot create a user document with a different user ID.
     * @deny (get) Authenticated user cannot get a user document with a different user ID.
     * @deny (update) Authenticated user cannot update a user document with a different user ID.
     * @deny (delete) Authenticated user cannot delete a user document with a different user ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // No listing of users.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the /users/{userId}/generatedContent collection and its documents.
     * @path /users/{userId}/generatedContent/{contentId}
     * @allow (create) Authenticated user can create generated content under their user document.
     * @allow (get) Authenticated user can get generated content under their user document.
     * @allow (update) Authenticated user can update generated content under their user document.
     * @allow (delete) Authenticated user can delete generated content under their user document.
     * @deny (create) Unauthenticated user cannot create generated content.
     * @deny (get) Unauthenticated user cannot get generated content.
     * @deny (update) Unauthenticated user cannot update generated content.
     * @deny (delete) Unauthenticated user cannot delete generated content.
     * @deny (create) Authenticated user cannot create generated content under a different user's document.
     * @deny (get) Authenticated user cannot get generated content under a different user's document.
     * @deny (update) Authenticated user cannot update generated content under a different user's document.
     * @deny (delete) Authenticated user cannot delete generated content under a different user's document.
     * @principle Enforces document ownership for writes and validates relational integrity.
     */
    match /users/{userId}/generatedContent/{contentId} {
        function isOwner(userId) {
            return request.auth != null && request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId); // User can list their own generated content.
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isExistingOwner(userId);
    }
  }
}