/**
 * @fileoverview Firestore Security Rules for Gemini Studio application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for generated content. Each user has full control over their own generated content.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Accessible only to the user.
 * - /users/{userId}/generatedContent/{contentId}: Stores content generated by the user.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own generated content.
 * - Listing generated content is restricted to the owner of the content.
 * - No global admin roles are defined in this initial prototyping phase.
 *
 * Denormalization for Authorization:
 * The 'userId' field is included in the 'GeneratedContent' documents, duplicating the 'userId' from the document path.
 * This denormalization is CRITICAL for authorization. It allows us to avoid expensive `get()` calls to the `/users/{userId}` document
 * to verify ownership. The security rules can directly check if the `request.auth.uid` matches the `userId` field in the document,
 * making the rules more efficient and secure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines a function to check if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines a function to check if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines a function to check if the authenticated user is the owner of the existing resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching user ID.
     * @allow (get) - Authenticated user retrieves their own profile.
     * @allow (update) - Authenticated user updates their own profile.
     * @allow (delete) - Authenticated user deletes their own profile.
     * @deny (create) - Unauthorized user attempts to create a profile with a mismatched user ID.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for generated content under a user's profile.
     * @path /users/{userId}/generatedContent/{contentId}
     * @allow (create) - Authenticated user creates content under their profile with matching user ID in the resource.
     * @allow (get) - Authenticated user retrieves content under their profile.
     * @allow (update) - Authenticated user updates content under their profile, maintaining the correct user ID.
     * @allow (delete) - Authenticated user deletes content under their profile.
     * @deny (create) - Unauthorized user attempts to create content with a mismatched user ID.
     * @principle Enforces document ownership for all operations on generated content.
     */
    match /users/{userId}/generatedContent/{contentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}