/**
 * @fileoverview Firestore Security Rules for Gemini Studio application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for both user profiles and generated content.
 * Users can only create, read, update, and delete their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the authenticated user.
 * - /users/{userId}/generatedContent/{contentId}: Stores user-generated content, accessible only to the owner.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Authorization is based on matching the authenticated user's UID to the document ID or a denormalized `userId` field.
 * - The rules are designed to prevent unauthorized access and ensure data ownership.
 *
 * Denormalization for Authorization:
 * - The `GeneratedContent` entity includes a `userId` field to simplify ownership checks and avoid `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the `/users` collection and enforces user-based authorization.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile at /users/user123.
     * @deny (create) User with UID 'user456' cannot create a profile at /users/user123.
     * @allow (get) User with UID 'user123' can read their own profile at /users/user123.
     * @deny (get) User with UID 'user456' cannot read the profile at /users/user123.
     * @allow (update) User with UID 'user123' can update their own profile at /users/user123.
     * @deny (update) User with UID 'user456' cannot update the profile at /users/user123.
     * @allow (delete) User with UID 'user123' can delete their own profile at /users/user123.
     * @deny (delete) User with UID 'user456' cannot delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the `/generatedContent` subcollection and enforces user-based authorization.
     * @path /users/{userId}/generatedContent/{contentId}
     * @allow (create) User with UID 'user123' can create content under /users/user123/generatedContent/content456.
     * @deny (create) User with UID 'user456' cannot create content under /users/user123/generatedContent/content456.
     * @allow (get) User with UID 'user123' can read their own content at /users/user123/generatedContent/content456.
     * @deny (get) User with UID 'user456' cannot read content under /users/user123/generatedContent/content456.
     * @allow (update) User with UID 'user123' can update their own content at /users/user123/generatedContent/content456.
     * @deny (update) User with UID 'user456' cannot update content under /users/user123/generatedContent/content456.
     * @allow (delete) User with UID 'user123' can delete their own content at /users/user123/generatedContent/content456.
     * @deny (delete) User with UID 'user456' cannot delete content under /users/user123/generatedContent/content456.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/generatedContent/{contentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}