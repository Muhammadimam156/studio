/**
 * @fileoverview Firestore Security Rules for Gemini Studio application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for both user profiles and generated content.
 * Users can only create, read, update, and delete their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Access is restricted to the owning user.
 * - /users/{userId}/generatedContent/{contentId}: Stores AI-generated content. Access is restricted to the owning user.
 *
 * Key Security Decisions:
 * - User listing is disabled to prevent enumeration.
 * - All write operations require authentication.
 * - The userId in the path must match the authenticated user's UID for all operations within a user's data tree.
 *
 * Denormalization for Authorization:
 * - The 'GeneratedContent' documents are stored directly under their respective user documents,
 *   making it clear that each user owns the content within their designated path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the user profile collection.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @deny (create) User with ID 'user123' cannot create a profile for 'user456'.
     * @allow (get) User with ID 'user123' can read their profile.
     * @deny (get) User with ID 'user123' cannot read profile for 'user456'.
     * @allow (update) User with ID 'user123' can update their profile.
     * @deny (update) User with ID 'user123' cannot update profile for 'user456'.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (delete) User with ID 'user123' cannot delete profile for 'user456'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures the generated content subcollection for each user.
     * @path /users/{userId}/generatedContent/{contentId}
     * @allow (create) User with ID 'user123' can create generated content under their profile.
     * @deny (create) User with ID 'user123' cannot create generated content under 'user456' profile.
     * @allow (get) User with ID 'user123' can read generated content under their profile.
     * @deny (get) User with ID 'user123' cannot read generated content under 'user456' profile.
     * @allow (update) User with ID 'user123' can update generated content under their profile.
     * @deny (update) User with ID 'user123' cannot update generated content under 'user456' profile.
     * @allow (delete) User with ID 'user123' can delete generated content under their profile.
     * @deny (delete) User with ID 'user123' cannot delete generated content under 'user456' profile.
     * @principle Enforces document ownership for all operations on generated content.
     */
    match /users/{userId}/generatedContent/{contentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}